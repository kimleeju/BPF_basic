//#include <linux/in.h>
#include <linux/bpf.h>
#include <bpf/bpf_helpers.h>
#include <bpf/bpf_core_read.h>
#include <bpf/bpf_endian.h>
#include <linux/if_ether.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <string.h>
#include <linux/in.h>
#include "bpf_legacy.h"
#define QUEUE_MAX_ENTRIES 10000
#define MAX_PORTS 4
struct packet_info {
    __u64 offset;
    char size[10]; // Change this to a character array
};

union port_t{
        __be32 ports;
        __be16 port16[2];
};

#if 0
struct {
    __uint(type, BPF_MAP_TYPE_QUEUE);
    __type(value, struct packet_info); // Use a struct as the value type
    __uint(max_entries, QUEUE_MAX_ENTRIES); // Increase the map size
} packet_size_map SEC(".maps");
#endif

#if 1

struct {
    __uint(type, BPF_MAP_TYPE_QUEUE);
    __type(value, struct packet_info);
    __uint(max_entries, QUEUE_MAX_ENTRIES);
} packet_map_template0 SEC(".maps");

struct {
    __uint(type, BPF_MAP_TYPE_QUEUE);
    __type(value, struct packet_info);
    __uint(max_entries, QUEUE_MAX_ENTRIES);
} packet_map_template1 SEC(".maps");

struct {
    __uint(type, BPF_MAP_TYPE_QUEUE);
    __type(value, struct packet_info);
    __uint(max_entries, QUEUE_MAX_ENTRIES);
} packet_map_template2 SEC(".maps");

struct {
    __uint(type, BPF_MAP_TYPE_QUEUE);
    __type(value, struct packet_info);
    __uint(max_entries, QUEUE_MAX_ENTRIES);
} packet_map_template3 SEC(".maps");

#if 0
struct {
    __uint(type, BPF_MAP_TYPE_ARRAY_OF_MAPS);
    __uint(max_entries, MAX_PORTS);
    __uint(key_size, sizeof(__u32));
    __uint(value_size, sizeof(int));
    int inner_map_fd[MAX_PORTS];
} map_array SEC(".maps") = {
    .inner_map_fd = (&packet_map_template0,&packet_map_template1,&packet_map_template2,&packet_map_template3),
};
#endif
#endif


static inline int bpf_memcmp(const void *s1, const void *s2, unsigned int n) {
    const unsigned char *p1 = s1;
    const unsigned char *p2 = s2;

    for (unsigned int i = 0; i < n; i++) {
        if (p1[i] != p2[i]) {
            return (p1[i] < p2[i]) ? -1 : 1;
        }
    }

    return 0;
}

SEC("prog")
int drop_all(struct __sk_buff *skb) {
//    __u32 size = 0; // Since max_entries is 1, we'll just use 0 as the key
//    __u32 value_offset = 1; // Since max_entries is 1, we'll just use 0 as the key
//   __u64 packet_size = skb->len;
#if 1 
    char delimiter[2];
    char redis_cmd[3];
    struct tcphdr tcp_header;
    __u64 offset = 1;

    static __u64 packet_id[MAX_PORTS];
    struct packet_info pinfo = {};
#endif
    __u32 nhoff = skb->cb[0];
//    __be32 src = load_word(skb,nhoff + offsetof(struct iphdr, saddr));
//    __be32 dst = load_word(skb,nhoff + offsetof(struct iphdr, daddr));
    union port_t port;
    port.ports = load_word(skb,nhoff);

//    bpf_printk("port : %u\n",port.port16[0]);
    bpf_printk("port : %u\n",port.port16[1]);

    struct bpf_map* packet_size_map;
//    int port_array[MAX_PORTS];
//    memset(port_array,-1,sizeof(port_array));

    int hash_value = (port.port16[1] / MAX_PORTS ) % MAX_PORTS;
    if(hash_value == 0){
        packet_size_map = &packet_map_template0;
    }    
    else if(hash_value == 1){
        packet_size_map = &packet_map_template1;
    }
    else if(hash_value == 2){
        packet_size_map = &packet_map_template2;
    }
    else if(hash_value == 3){
        packet_size_map = &packet_map_template3;
    }


    if (bpf_skb_load_bytes(skb, ETH_HLEN + sizeof(struct iphdr), &tcp_header, sizeof(tcp_header)) != 0){
        return -1;
    }

#if 1

    __u32 tcp_hdr_len = tcp_header.doff*2;
    
    if(bpf_skb_load_bytes(skb, ETH_HLEN+sizeof(struct iphdr)+tcp_hdr_len, &redis_cmd,sizeof(redis_cmd)) !=0 ){
        return -1;
    }

    if(bpf_memcmp(redis_cmd,"set",3)!=0 && bpf_memcmp(redis_cmd,"SET",3)!=0){
        if(bpf_memcmp(redis_cmd,"xxx",3)==0 || bpf_memcmp(redis_cmd,"XXX",3)==0)
            return -1;
        
        memset(pinfo.size, 0, sizeof(pinfo.size));

        bpf_map_push_elem(packet_size_map, &pinfo, BPF_ANY);
        //        bpf_map_update_elem(&packet_size_map, &packet_id, &pinfo, BPF_ANY);
#if 1
        if(bpf_memcmp(redis_cmd,"",1)==0){
//            pinfo.offset=0;
                bpf_map_push_elem(packet_size_map, &pinfo, BPF_ANY);
//            bpf_map_update_elem(&packet_size_map, &packet_id, &pinfo, BPF_ANY);
            
            //            offset = 0;
//            bpf_map_update_elem(&packet_size_map, &value_offset, &offset, BPF_ANY);
        }
//        packet_id++;
#endif
        return -1;
    }
    offset = ETH_HLEN+sizeof(struct iphdr)+tcp_hdr_len+3; // set(3) \r\n(2) $3\r\n(4) key\r\n(5)
    
    int val_ptr;
    for (int j = 0; j < 4; ++j){
        for(int i=0; i<512; ++i){ // Assuming a maximum of 512 bytes to search
            if(bpf_skb_load_bytes(skb,offset+i, &delimiter,sizeof(delimiter))!=0)
              continue;
          if(bpf_memcmp(delimiter,"\r\n",2)==0){
              offset += i+2;
              if (j == 2){
                val_ptr = offset+1; //$제거 
             }
              break;
            }
        }
    }
    bpf_printk("22222222\n"); 
    bpf_skb_load_bytes(skb,val_ptr, &pinfo.size,sizeof(pinfo.size));
//    packet_size -= offset + 2; // 2(\r\n)
    offset -= (ETH_HLEN+sizeof(struct iphdr)-2);
    pinfo.offset = offset;
    //bpf_map_update_elem(&packet_size_map, &packet_id, &pinfo, BPF_ANY);

    bpf_map_push_elem(packet_size_map, &pinfo, BPF_ANY);
#endif
    return -1;
}


char _license[] SEC("license") = "GPL";
